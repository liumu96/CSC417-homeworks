#include "d2psi_neo_hooken_dF2.h"

void d2psi_nei_hookean_dF2(
    Eigen::Matrix99d &ddw,
    Eigen::Ref<const Eigen::Matrix3d> F,
    double C,
    double D)
{
    double J = F.determinant();
    Eigen::Matrix3d FinvT = F.inverse().transpose(); // F^-T
    Eigen::Matrix3d FTF = F.transpose() * F;
    double traceFFT = FTF.trace();

    // Fill the second derivative matrix ddw
    ddw.setZero();
    for (int i = 0; i < 3; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            for (int k = 0; k < 3; ++k)
            {
                for (int l = 0; l < 3; ++l)
                {

                    if (i == k && j == l)
                    {
                        ddw(i * 3 + k, j * 3 + l) += 2 * C / pow(J, 2. / 3.);
                    }
                    ddw(i * 3 + k, j * 3 + l) += -C * 4. / 3. * (F(i, j) * FinvT(k, l) + F(k, l) * FinvT(i, j));
                    ddw(i * 3 + k, j * 3 + l) += 2. * C * traceFFT / 3. * (-5. * FinvT(i, j) * FinvT(k, l) / (3. * pow(J, 8.0 / 3.0)) + FinvT(j, l) * FinvT(l, i) / pow(J, 5.0 / 3.0));
                    ddw(i * 3 + k, j * 3 + l) += 2 * D * FinvT(i, j) * FinvT(k, l) - 2 * D * (J - 1) * FinvT(j, l) * FinvT(l, i);
                }
            }
        }
    }
}

// void d2psi_nei_hookean_dF2(
//     Eigen::Matrix99d &ddw,
//     Eigen::Ref<const Eigen::Matrix3d> F,
//     double C,
//     double D)
// {
//     double J = F.determinant();
//     Eigen::Matrix3d adjF = F.inverse().transpose();
//     Eigen::Matrix3d FTF = F.transpose() * F;
//     double trFTF = FTF.trace();

//     ddw(0, 0) = C * (
//         1.0 / pow(J, 2.0 / 3.0) * 2.0
//         + pow(adjF(0, 0), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)
//         - F(0, 0) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0))
//         + D * pow(adjF(0, 0), 2.0) * 2.0;
//     ddw(0, 1) = -C * (
//         F(0, 0) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0)
//       + F(1, 0) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 0)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(1, 0)) * (adjF(0, 0)) * 2.0;
//     ddw(0, 2) = -C * (
//         F(0, 0) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 0) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 0)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 0)) * (adjF(0, 0)) * 2.0;
//     ddw(0, 3) = -C * (
//         F(0, 0) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0)
//       + F(0, 1) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(0, 1)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(0, 1)) * (adjF(0, 0)) * 2.0;
//     ddw(0, 4) = -C * (
//         F(2, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 0) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(1, 1) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(1, 1)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(1, 1)) * (adjF(0, 0)) * 2.0
//       - D * F(2, 2) * (-J + 1.0) * 2.0;
//     ddw(0, 5) = C * (
//         F(1, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 0) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 1) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 1)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 1)) * (adjF(0, 0)) * 2.0
//       + D * F(1, 2) * (-J + 1.0) * 2.0;
//     ddw(0, 6) = -C * (
//         F(0, 0) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(0, 2) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(0, 2)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(0, 2)) * (adjF(0, 0)) * 2.0;
//     ddw(0, 7) = C * (
//         F(2, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 0) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(1, 2) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(1, 2)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(1, 2)) * (adjF(0, 0)) * 2.0
//       + D * F(2, 1) * (-J + 1.0) * 2.0;

//     ddw(0, 8) = -C * (
//         F(1, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 0) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 2)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(0, 0)) * 2.0
//       - D * F(1, 1) * (-J + 1.0) * 2.0;
//     ddw(1, 0) = -C * (
//         F(0, 0) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0)
//       + F(1, 0) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 0)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(1, 0)) * (adjF(0, 0)) * 2.0;
//     ddw(1, 1) = C * (
//         1.0 / pow(J, 2.0 / 3.0) * 2.0
//       + pow(adjF(1, 0), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)
//       + F(1, 0) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0))
//       + D * pow(adjF(1, 0), 2.0) * 2.0;

//     ddw(1, 2) = -C * (
//         F(1, 0) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 0)) * (adjF(1, 0)) * 2.0;

//     ddw(1, 3) = C * (
//         F(2, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 1) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(1, 0) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 0)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(1, 0)) * (adjF(0, 1)) * 2.0
//       + D * F(2, 2) * (-J + 1.0) * 2.0;

//     ddw(1, 4) = -C * (
//         F(1, 0) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(1, 1) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 1)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(1, 1)) * (adjF(1, 0)) * 2.0;

//     ddw(1, 5) = C * (
//         F(0, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (-2.0 / 3.0)
//       + F(1, 0) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 1) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 1)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 1)) * (adjF(1, 0)) * 2.0
//       - D * F(0, 2) * (-J + 1.0) * 2.0;
//     ddw(1, 6) = -C * (
//         F(2, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       - F(0, 2) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(1, 0) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 0)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(1, 0)) * (adjF(0, 2)) * 2.0
//       - D * F(2, 1) * (-J + 1.0) * 2.0;

//     ddw(1, 7) = C * (
//         F(1, 0) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(1, 2) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 2)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(1, 2)) * (adjF(1, 0)) * 2.0;
//     ddw(1, 8) = C * (
//         F(0, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       - F(1, 0) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 2)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 2)) * (adjF(1, 0)) * 2.0
//       + D * F(0, 1) * (-J + 1.0) * 2.0;
//     ddw(2, 0) = -C * (
//         F(0, 0) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 0) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 0)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 0)) * (adjF(0, 0)) * 2.0;
//     ddw(2, 1) = -C * (
//         F(1, 0) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 0)) * (adjF(1, 0)) * 2.0;
//     ddw(2, 2) = C * (
//         1.0 / pow(J, 2.0 / 3.0) * 2.0
//       + pow(adjF(2, 0), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)
//       - F(2, 0) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0))
//       + D * pow(adjF(2, 0), 2.0) * 2.0;
//     ddw(2, 3) = -C * (
//         F(1, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 1) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 0)) * (adjF(0, 1)) * 2.0
//       - D * F(1, 2) * (-J + 1.0) * 2.0;
//     ddw(2, 4) = C * (
//         F(0, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       - F(1, 1) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 0)) * (adjF(1, 1)) * 2.0
//       + D * F(0, 2) * (-J + 1.0) * 2.0;
//     ddw(2, 5) = -C * (
//         F(2, 0) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0)
//       + F(2, 1) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 1)) * (adjF(2, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 1)) * (adjF(2, 0)) * 2.0;
//     ddw(2, 6) = C * (
//         F(1, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       - F(0, 2) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 0)) * (adjF(0, 2)) * 2.0
//       + D * F(1, 1) * (-J + 1.0) * 2.0;
//     ddw(2, 7) = -C * (
//         F(0, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(1, 2) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(1, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 0)) * (adjF(1, 2)) * 2.0
//       - D * F(0, 1) * (-J + 1.0) * 2.0;
//     ddw(2, 8) = -C * (
//         F(2, 0) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 2)) * (adjF(2, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(2, 0)) * 2.0;
//     ddw(3, 0) = -C * (
//         F(0, 0) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0)
//       + F(0, 1) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(0, 1)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(0, 1)) * (adjF(0, 0)) * 2.0;
//     ddw(3, 1) = C * (
//         F(2, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 1) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(1, 0) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(1, 0)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(1, 0)) * (adjF(0, 1)) * 2.0
//       + D * F(2, 2) * (-J + 1.0) * 2.0;
//     ddw(3, 2) = -C * (
//         F(1, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 1) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 0) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 0)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       - D * (adjF(2, 0)) * (adjF(0, 1)) * 2.0
//       - D * F(1, 2) * (-J + 1.0) * 2.0;

//     ddw(3, 3) = C * (1.0 / pow(J, 2.0 / 3.0) * 2.0 + pow(adjF(0, 1), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0) + F(0, 1) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0)) + D * pow(adjF(0, 1), 2.0) * 2.0;
//     ddw(3, 4) = -C * (F(0, 1) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(1, 1) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 1)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 1)) * (adjF(0, 1)) * 2.0;
//     ddw(3, 5) = C * (F(0, 1) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 1)) * (adjF(0, 1)) * 2.0;
//     ddw(3, 6) = -C * (F(0, 1) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(0, 2) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(0, 2)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(0, 2)) * (adjF(0, 1)) * 2.0;
//     ddw(3, 7) = C * (F(2, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (-2.0 / 3.0) + F(0, 1) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(1, 2) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(1, 2)) * (adjF(0, 1)) * 2.0 - D * F(2, 0) * (-J + 1.0) * 2.0;
//     ddw(3, 8) = C * (F(1, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 1) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 2) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 2)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 2)) * (adjF(0, 1)) * 2.0 + D * F(1, 0) * (-J + 1.0) * 2.0;
//     ddw(4, 0) = -C * (F(2, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(0, 0) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(1, 1) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(1, 1)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(1, 1)) * (adjF(0, 0)) * 2.0 - D * F(2, 2) * (-J + 1.0) * 2.0;
//     ddw(4, 1) = -C * (F(1, 0) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(1, 1) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 1)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 1)) * (adjF(1, 0)) * 2.0;
//     ddw(4, 2) = C * (F(0, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(1, 1) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(2, 0) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 0)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 0)) * (adjF(1, 1)) * 2.0 + D * F(0, 2) * (-J + 1.0) * 2.0;
//     ddw(4, 3) = -C * (F(0, 1) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(1, 1) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 1)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 1)) * (adjF(0, 1)) * 2.0;
//     ddw(4, 4) = C * (1.0 / pow(J, 2.0 / 3.0) * 2.0 + pow(adjF(1, 1), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0) - F(1, 1) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0)) + D * pow(adjF(1, 1), 2.0) * 2.0;
//     ddw(4, 5) = -C * (F(1, 1) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(2, 1) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 1)) * (adjF(1, 1)) * 2.0;
//     ddw(4, 6) = C * (F(2, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 2) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(1, 1) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 1)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(1, 1)) * (adjF(0, 2)) * 2.0 + D * F(2, 0) * (-J + 1.0) * 2.0;
//     ddw(4, 7) = -C * (F(1, 1) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(1, 2) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 2)) * (adjF(1, 1)) * 2.0;
//     ddw(4, 8) = -C * (F(0, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(1, 1) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 2) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 2)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 2)) * (adjF(1, 1)) * 2.0 - D * F(0, 0) * (-J + 1.0) * 2.0;
//     ddw(5, 0) = C * (F(1, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(0, 0) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(2, 1) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 1)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 1)) * (adjF(0, 0)) * 2.0 + D * F(1, 2) * (-J + 1.0) * 2.0;
//     ddw(5, 1) = C * (F(0, 2) / pow(J, 5.0 / 3.0) * (trFTF) * (-2.0 / 3.0) + F(1, 0) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 1)) * (adjF(1, 0)) * 2.0 - D * F(0, 2) * (-J + 1.0) * 2.0;
//     ddw(5, 2) = -C * (F(2, 0) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(2, 1) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(2, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 1)) * (adjF(2, 0)) * 2.0;
//     ddw(5, 3) = C * (F(0, 1) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 1)) * (adjF(0, 1)) * 2.0;
//     ddw(5, 4) = -C * (F(1, 1) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(2, 1) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 1)) * (adjF(1, 1)) * 2.0;
//     ddw(5, 5) = C * (1.0 / pow(J, 2.0 / 3.0) * 2.0 + pow(adjF(2, 1), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0) + F(2, 1) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0)) + D * pow(adjF(2, 1), 2.0) * 2.0;
//     ddw(5, 6) = -C * (F(1, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 2) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 1)) * (adjF(0, 2)) * 2.0 - D * F(1, 0) * (-J + 1.0) * 2.0;
//     ddw(5, 7) = C * (F(0, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(1, 2) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(1, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 1)) * (adjF(1, 2)) * 2.0 + D * F(0, 0) * (-J + 1.0) * 2.0;
//     ddw(5, 8) = -C * (
//         F(2, 1) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(2, 2) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 2)) * (adjF(2, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 2)) * (adjF(2, 1)) * 2.0;
//     ddw(6, 0) = -C * (
//         F(0, 0) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(0, 2) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(0, 2)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(0, 2)) * (adjF(0, 0)) * 2.0;
//     ddw(6, 1) = -C * (
//         F(2, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 2) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(1, 0) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 0)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 0)) * (adjF(0, 2)) * 2.0 - D * F(2, 1) * (-J + 1.0) * 2.0;
//     ddw(6, 2) = C * (
//         F(1, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 2) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(2, 0) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 0)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 0)) * (adjF(0, 2)) * 2.0 + D * F(1, 1) * (-J + 1.0) * 2.0;
//     ddw(6, 3) = -C * (
//         F(0, 1) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(0, 2) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(0, 2)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(0, 2)) * (adjF(0, 1)) * 2.0;
//     ddw(6, 4) = C * (
//         F(2, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 2) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(1, 1) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 1)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(1, 1)) * (adjF(0, 2)) * 2.0 + D * F(2, 0) * (-J + 1.0) * 2.0;
//     ddw(6, 5) = -C * (
//         F(1, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(0, 2) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 1)) * (adjF(0, 2)) * 2.0 - D * F(1, 0) * (-J + 1.0) * 2.0;
//     ddw(6, 6) = C * (
//         1.0 / pow(J, 2.0 / 3.0) * 2.0 + pow(adjF(0, 2), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0) - F(0, 2) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0)) + D * pow(adjF(0, 2), 2.0) * 2.0;
//     ddw(6, 7) = -C * (
//         F(0, 2) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(1, 2) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 2)) * (adjF(0, 2)) * 2.0;
//     ddw(6, 8) = -C * (
//         F(0, 2) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 2) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 2)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 2)) * (adjF(0, 2)) * 2.0;
//     ddw(7, 0) = C * (
//         F(2, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(0, 0) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(1, 2) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(1, 2)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 2)) * (adjF(0, 0)) * 2.0 + D * F(2, 1) * (-J + 1.0) * 2.0;
//     ddw(7, 1) = C * (
//         F(1, 0) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(1, 2) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(1, 2)) * (adjF(1, 0)) * 2.0;
//     ddw(7, 2) = -C * (
//         F(0, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(1, 2) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(2, 0) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 0)) * (adjF(1, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 0)) * (adjF(1, 2)) * 2.0 - D * F(0, 1) * (-J + 1.0) * 2.0;
//     ddw(7, 3) = C * (
//         F(2, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (-2.0 / 3.0) + F(0, 1) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(1, 2) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(1, 2)) * (adjF(0, 1)) * 2.0 - D * F(2, 0) * (-J + 1.0) * 2.0;
//     ddw(7, 4) = -C * (
//         F(1, 1) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(1, 2) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 2)) * (adjF(1, 1)) * 2.0;
//     ddw(7, 5) = C * (
//         F(0, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) + F(1, 2) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 1) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 1)) * (adjF(1, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 1)) * (adjF(1, 2)) * 2.0 + D * F(0, 0) * (-J + 1.0) * 2.0;
//     ddw(7, 6) = -C * (
//         F(0, 2) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (-4.0 / 3.0) + F(1, 2) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(1, 2)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(1, 2)) * (adjF(0, 2)) * 2.0;
//     ddw(7, 7) = C * (
//         1.0 / pow(J, 2.0 / 3.0) * 2.0 + pow(adjF(1, 2), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0) + F(1, 2) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0)) + D * pow(adjF(1, 2), 2.0) * 2.0;
//     ddw(7, 8) = -C * (
//         F(1, 2) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - F(2, 2) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + (adjF(2, 2)) * (adjF(1, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 2)) * (adjF(1, 2)) * 2.0;
//     // i = 2, j = 2, k = 0, l = 0
//     ddw(8, 0) = -C * (
//         F(1, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(0, 0) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 2) * (adjF(0, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 2)) * (adjF(0, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 2)) * (adjF(0, 0)) * 2.0 - D * F(1, 1) * (-J + 1.0) * 2.0;

//     ddw(8, 1) = C * (
//         F(0, 1) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0) - F(1, 0) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 2) * (adjF(1, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 2)) * (adjF(1, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) - D * (adjF(2, 2)) * (adjF(1, 0)) * 2.0 + D * F(0, 1) * (-J + 1.0) * 2.0;

//     ddw(8, 2) = -C * (
//         F(2, 0) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) + F(2, 2) * (adjF(2, 0)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0) - (adjF(2, 2)) * (adjF(2, 0)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)) + D * (adjF(2, 2)) * (adjF(2, 0)) * 2.0;
//     // i = 2, j = 2, k = 0, l = 1
//     ddw(8, 3) = C * (
//         F(1, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       - F(0, 1) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(0, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 2)) * (adjF(0, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(0, 1)) * 2.0
//       + D * F(1, 0) * (-J + 1.0) * 2.0;

//     // i = 2, j = 2, k = 1, l = 1 special
//     ddw(8, 4) = -C * (
//         F(0, 0) / pow(J, 5.0 / 3.0) * (trFTF) * (2.0 / 3.0)
//       + F(1, 1) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(1, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 2)) * (adjF(1, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(1, 1)) * 2.0
//       + D * F(0, 0) * (J - 1.0) * 2.0;
//     // i = 2, j = 2, k = 2, l = 1
//     ddw(8, 5) = -C * (
//         F(2, 1) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(2, 1)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 2)) * (adjF(2, 1)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(2, 1)) * 2.0;
//     // i = 2, j = 2, k = 0, l = 2
//     ddw(8, 6) = -C * (
//         F(0, 2) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + F(2, 2) * (adjF(0, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - (adjF(2, 2)) * (adjF(0, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(0, 2)) * 2.0;
//     // i = 2, j = 2, k = 1, l = 2
//     ddw(8, 7) = -C * (
//         F(1, 2) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       - F(2, 2) * (adjF(1, 2)) / pow(J, 5.0 / 3.0) * (4.0 / 3.0)
//       + (adjF(2, 2)) * (adjF(1, 2)) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0))
//       + D * (adjF(2, 2)) * (adjF(1, 2)) * 2.0;

//     // i = 2, j = 2, k = 2, l = 2
//     ddw(8, 8) = C * (
//         1.0 / pow(J, 2.0 / 3.0) * 2.0
//       + pow(adjF(2, 2), 2.0) / pow(J, 8.0 / 3.0) * (trFTF) * (1.0E+1 / 9.0)
//       - F(2, 2) * (adjF(2, 2)) / pow(J, 5.0 / 3.0) * (8.0 / 3.0))
//       + D * pow(adjF(2, 2), 2.0) * 2.0;
// }